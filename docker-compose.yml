version: "3.8"

services:
  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=${DB_USER:-siembox}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}
      - POSTGRES_DB=siembox
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - siem_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${DB_USER:-siembox} -d siembox"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:alpine
    volumes:
      - redis_data:/data
    networks:
      - siem_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  detection:
    image: ${DOCKER_REGISTRY:-ghcr.io/${GITHUB_REPOSITORY_OWNER:-cladkins}}/siembox/detection:${TAG:-latest}
    build:
      context: ./detection
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    volumes:
      - sigma_rules:/app/rules
    environment:
      - SIGMA_RULES_PATH=/app/rules
    networks:
      - siem_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    user: "65534:65534"
    init: true

  collector:
    image: ${DOCKER_REGISTRY:-ghcr.io/${GITHUB_REPOSITORY_OWNER:-cladkins}}/siembox/collector:${TAG:-latest}
    build:
      context: ./collector
      dockerfile: Dockerfile
    ports:
      - "5514:5514/udp"
      - "5514:5514/tcp"
      - "8000:8000"
    volumes:
      - collector_data:/var/log/collector
    environment:
      - LOG_LEVEL=info
      - API_URL=http://api:8080
    networks:
      - siem_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  iplookup:
    image: ${DOCKER_REGISTRY:-ghcr.io/${GITHUB_REPOSITORY_OWNER:-cladkins}}/siembox/iplookup:${TAG:-latest}
    build:
      context: ./iplookup
      dockerfile: Dockerfile
    ports:
      - "8002:8000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - siem_network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  api:
    image: ${DOCKER_REGISTRY:-ghcr.io/${GITHUB_REPOSITORY_OWNER:-cladkins}}/siembox/api:${TAG:-latest}
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=db
      - DB_USER=${DB_USER:-siembox}
      - DB_PASSWORD=${DB_PASSWORD:-changeme}
      - DB_NAME=siembox
      - JWT_SECRET=${JWT_SECRET:-change_this_in_production}
    networks:
      - siem_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    image: ${DOCKER_REGISTRY:-ghcr.io/${GITHUB_REPOSITORY_OWNER:-cladkins}}/siembox/frontend:${TAG:-latest}
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_DETECTION_URL=http://localhost:8001
    networks:
      - siem_network
    depends_on:
      api:
        condition: service_healthy
      detection:
        condition: service_healthy

volumes:
  collector_data:
    name: siembox_collector_data
  sigma_rules:
    name: siembox_sigma_rules
  postgres_data:
    name: siembox_postgres_data
  redis_data:
    name: siembox_redis_data

networks:
  siem_network:
    name: siembox_network