services:
  # Log Collector Service
  collector:
    build:
      context: ./collector
      dockerfile: Dockerfile
    ports:
      - "5514:5514/udp"
      - "5514:5514/tcp"
      - "8000:8000"
    volumes:
      - collector_data:/var/log/collector
    environment:
      - LOG_LEVEL=info
      - API_URL=http://api:8080
      - RETRY_COUNT=3
      - BACKOFF_FACTOR=1.5
      - BUFFER_SIZE=100
      - FLUSH_INTERVAL=5
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - siem_network
    depends_on:
      api:
        condition: service_healthy

  # Detection Engine Service
  detection:
    build:
      context: ./detection
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    volumes:
      - sigma_rules:/app/rules
    environment:
      - SIGMA_RULES_PATH=/app/rules
      - COLLECTOR_HOST=collector
    networks:
      - siem_network
    depends_on:
      collector:
        condition: service_healthy

  # IP Lookup Service
  iplookup:
    build:
      context: ./iplookup
      dockerfile: Dockerfile
    ports:
      - "8002:8000"  # Added port mapping
    environment:
      - IPAPI_KEY=${IPAPI_KEY}
      - CROWDSEC_API_KEY=${CROWDSEC_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - siem_network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - API_URL=http://api:8080
    networks:
      - siem_network
    depends_on:
      api:
        condition: service_healthy

  # API Gateway
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - COLLECTOR_HOST=collector
    networks:
      - siem_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Database
  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=siembox
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - siem_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d siembox"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis for caching and rate limiting
  redis:
    image: redis:alpine
    volumes:
      - redis_data:/data
    networks:
      - siem_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"

volumes:
  collector_data:
  sigma_rules:
  postgres_data:
  redis_data:

networks:
  siem_network:
    driver: bridge