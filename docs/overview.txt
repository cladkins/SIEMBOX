SIEMBox Overview

Introduction
===========

SIEMBox is a Security Information and Event Management (SIEM) system designed for collecting, processing, and analyzing log data for security monitoring. The system leverages Sigma rules for threat detection and provides real-time alerting capabilities through a modern, containerized architecture.

System Architecture
=================

The system consists of five main services:

1. Collector Service (Port 5514, 8000)
   - Receives logs via syslog (TCP/UDP on port 5514)
   - Uses rsyslog for log ingestion
   - Processes and forwards logs to API service
   - Maintains a local buffer for reliability
   - Handles log rotation and file monitoring
   - Extracts IP addresses for threat intelligence

2. Detection Service (Port 8001)
   - Manages Sigma detection rules
   - Clones rules from SigmaHQ/sigma GitHub repository
   - Analyzes logs against enabled rules
   - Provides rule management API
   - Supports rule categorization and bulk operations
   - Maintains rule states (enabled/disabled)
   - Runs as non-root user for security
   - Uses bind mount for rules persistence

3. IP Lookup Service (Port 8002)
   - Provides IP geolocation via ip-api.com
   - Integrates with CrowdSec for threat intelligence
   - Implements caching for performance
   - Handles rate limiting for API quotas
   - Supports batch processing of IP lookups

4. API Gateway (Port 8080)
   - Central coordination point for all services
   - Stores logs in PostgreSQL database
   - Manages API keys and configurations
   - Provides unified API for frontend
   - Handles pagination and filtering
   - Implements CORS and security measures

5. Frontend Service (Port 3000)
   - React-based web interface
   - Real-time log viewing and filtering
   - Detection rule management
   - System statistics and monitoring
   - Dark theme modern UI
   - Responsive design

Initial Setup
============

1. System Requirements:
   - Docker Engine 24.0 or later
   - Docker Compose V2
   - 8GB RAM minimum (16GB recommended)
   - 50GB disk space minimum
   - Git (for rule updates)

2. Clone Repository:
   $ git clone https://github.com/yourusername/siembox.git
   $ cd siembox

3. Initialize Rules Directory:
   $ ./init-rules.sh

   This script:
   - Creates the rules directory
   - Sets secure permissions (750)
   - Sets ownership to nobody:nogroup (65534:65534)
   - Prepares for Sigma rules integration

4. Environment Configuration:
   $ cp .env.example .env

   Configure the following variables in .env:

   Database Configuration:
   - DB_USER: Database username (default: siembox)
   - DB_PASSWORD: Database password (default: changeme)

   API Keys:
   - IPAPI_KEY: IP-API.com API key
     * Get key at: https://ip-api.com/docs/premium
     * Free tier: 45 requests/minute
     * Pro tier: Unlimited requests
   - CROWDSEC_API_KEY: CrowdSec API key
     * Get key at: https://app.crowdsec.net/cti-api
     * Rate limit: 30 requests/day with batch processing

   Security:
   - JWT_SECRET: API security key (Change to secure random string)

   Service Ports:
   - API_PORT: API Gateway port (default: 8080)
   - DETECTION_PORT: Detection Service port (default: 8001)
   - COLLECTOR_PORT: Collector Service port (default: 8000)
   - IPLOOKUP_PORT: IP Lookup Service port (default: 8002)
   - FRONTEND_PORT: Frontend Service port (default: 3000)

   Frontend Configuration:
   - REACT_APP_API_URL: API Gateway URL (default: http://localhost:8080)
   - REACT_APP_DETECTION_URL: Detection Service URL (default: http://localhost:8001)

   Redis Configuration:
   - REDIS_HOST: Redis host (default: redis)
   - REDIS_PORT: Redis port (default: 6379)

   Log Configuration:
   - LOG_RETENTION_DAYS: Days to retain logs (default: 14)

   Admin Configuration:
   - ADMIN_USERNAME: Admin username (default: admin)
   - ADMIN_PASSWORD: Admin password (default: changeme_on_first_login)

5. Start Services:
   $ docker-compose up -d

   Services will start in the following order:
   1. Database and Redis (core dependencies)
   2. API Gateway (after database is healthy)
   3. Detection Service (loads rules)
   4. IP Lookup Service (after Redis is healthy)
   5. Collector Service (begins accepting logs)
   6. Frontend Service (after API and Detection are healthy)

6. Verify Installation:
   # Check service status
   $ docker-compose ps

   # View service logs
   $ docker-compose logs -f

   # Check health endpoints
   $ curl http://localhost:8080/health    # API Gateway
   $ curl http://localhost:8001/health    # Detection Service
   $ curl http://localhost:8002/health    # IP Lookup Service
   $ curl http://localhost:8000/health    # Collector Service

7. Access Web Interface:
   - Open http://localhost:3000 in your browser
   - Log in with default credentials:
     * Username: admin
     * Password: changeme_on_first_login
   - Change default password immediately

Directory Structure
=================

siembox/
├── api/                 # API Gateway service
├── collector/           # Log collector service
├── detection/           # Detection engine service
├── docs/               # Documentation
├── frontend/           # Web interface
├── iplookup/           # IP intelligence service
├── rules/              # Sigma detection rules
├── docker-compose.yml  # Service orchestration
├── .env.example        # Environment template
└── init-rules.sh       # Initialization script

Next Steps
=========

1. Review additional documentation:
   - See docs/api.txt for API documentation
   - See docs/monitoring.txt for monitoring setup
   - See docs/backup.txt for backup procedures
   - See docs/performance.txt for tuning guidelines
   - See docs/security.txt for security features

2. Configure log sources to forward to port 5514

3. Review and enable detection rules

4. Set up monitoring and alerting

5. Configure backup procedures