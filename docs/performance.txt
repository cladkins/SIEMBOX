[Previous Database Optimization section with the following additions under "2. Index Optimization"]

VPS Audit Table Indexes:
  CREATE INDEX idx_servers_name ON servers (name);
  CREATE INDEX idx_servers_ip_address ON servers (ip_address);
  CREATE INDEX idx_servers_last_audit ON servers (last_audit_at);
  
  CREATE INDEX idx_audit_results_timestamp ON audit_results USING BRIN (timestamp);
  CREATE INDEX idx_audit_results_server_id ON audit_results (server_id);
  CREATE INDEX idx_audit_results_status ON audit_results (status);
  CREATE INDEX idx_audit_results_server_timestamp ON audit_results (server_id, timestamp DESC);

[Previous content through "Caching Strategy" section with the following additions]

5. SSH Connection Management
-------------------------

Connection Pool Configuration:
  {
    'max_connections': 50,
    'min_connections': 5,
    'max_idle_time': 300,
    'connection_timeout': 30,
    'retry_limit': 3,
    'retry_delay': 5
  }

Connection Pool Implementation:
  class SSHConnectionPool:
    def __init__(self, config):
      self.pool = {}
      self.config = config
      self.lock = asyncio.Lock()
    
    async def get_connection(self, server_id):
      async with self.lock:
        if server_id in self.pool:
          conn = self.pool[server_id]
          if conn.is_active():
            return conn
        
        conn = await self.create_connection(server_id)
        self.pool[server_id] = conn
        return conn
    
    async def cleanup_idle_connections(self):
      async with self.lock:
        current_time = time.time()
        for server_id, conn in list(self.pool.items()):
          if current_time - conn.last_used > self.config['max_idle_time']:
            await self.close_connection(server_id)

Connection Health Check:
  async def check_connections():
    while True:
      for server_id, conn in connection_pool.items():
        try:
          if not await conn.is_active():
            await connection_pool.refresh_connection(server_id)
        except Exception as e:
          logger.error(f"Connection check failed for {server_id}: {e}")
      await asyncio.sleep(60)

[Previous content through "Scaling Recommendations" section with the following additions]

VPS Audit Service Scaling:
  Small Deployment (up to 50 servers):
    resources:
      vps-audit:
        cpu: 2
        memory: 4Gi
        connections: 50
  
  Medium Deployment (up to 200 servers):
    resources:
      vps-audit:
        cpu: 4
        memory: 8Gi
        connections: 200
  
  Large Deployment (500+ servers):
    resources:
      vps-audit:
        cpu: 8
        memory: 16Gi
        connections: 500

[Previous content through "Performance Monitoring" section with the following additions under "2. Application Metrics"]

VPS Audit Metrics:
  - alert: HighSSHConnectionFailures
    expr: rate(siembox_vps_audit_ssh_connections_total{status="failed"}[5m]) > 0.1
    for: 5m
    labels:
      severity: warning
  
  - alert: LongAuditDuration
    expr: histogram_quantile(0.95, rate(siembox_vps_audit_audit_duration_seconds_bucket[5m])) > 300
    for: 5m
    labels:
      severity: warning
  
  - alert: HighConnectionPoolUsage
    expr: siembox_vps_audit_connection_pool_active / siembox_vps_audit_connection_pool_max > 0.8
    for: 5m
    labels:
      severity: warning
  
  - alert: AuditQueueBacklog
    expr: siembox_vps_audit_audit_queue_size > 100
    for: 5m
    labels:
      severity: warning

3. Performance Optimization
------------------------

Audit Execution:
  - Parallel audit execution for multiple servers
  - Batch processing of audit results
  - Incremental updates for unchanged components
  - Caching of system information
  - Compression of audit results

SSH Optimization:
  - Connection pooling
  - Keep-alive settings
  - Compression enabled
  - Control channel timeouts
  - Batch command execution

Database Optimization:
  - Partitioned audit results
  - Regular vacuum and analyze
  - Optimized indexes
  - Result archival
  - Efficient JSON storage

4. Resource Management
-------------------

Memory Management:
  - Connection pool size limits
  - Result buffer sizing
  - Temporary file cleanup
  - Memory-mapped file handling
  - Garbage collection tuning

CPU Utilization:
  - Worker thread pool
  - Process affinity
  - Priority scheduling
  - Batch processing
  - Async I/O operations

Disk I/O:
  - Buffered writes
  - Sequential reads
  - Temporary file management
  - Log rotation
  - Compression ratios

Network Usage:
  - Connection pooling
  - Request batching
  - Response compression
  - Keep-alive optimization
  - Bandwidth throttling

5. Monitoring Thresholds
----------------------

Critical Thresholds:
  - SSH Connection Failures: >10% in 5 minutes
  - Audit Duration: >5 minutes per server
  - Connection Pool Usage: >80% capacity
  - Audit Queue Size: >100 pending audits
  - Error Rate: >5% of audit attempts

Warning Thresholds:
  - SSH Connection Failures: >5% in 5 minutes
  - Audit Duration: >3 minutes per server
  - Connection Pool Usage: >60% capacity
  - Audit Queue Size: >50 pending audits
  - Error Rate: >2% of audit attempts

Performance Targets:
